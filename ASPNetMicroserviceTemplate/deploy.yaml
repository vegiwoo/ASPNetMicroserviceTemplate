# Класс приоритета
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: hight-priority
value: 1000000                  # Значение приоритета     
preemptionPolicy: Never         # Политика вытеснения
globalDefault: false            # Должен ли быть дефолтным классом приоритета
description: "Critical service" # Описание класса приоритета
---
# Спецификация для создания сервиса
# Манифест - Заголовок
apiVersion: apps/v1
kind: Deployment
# Манифест - Объект deployment
metadata:
  # Имя сервиса
  name: aspnetmicroservicetemplate
spec:
  # Количество реплик сервиса 
  replicas: 1
  selector:
    matchLabels:
      pod: aspnetmicroservicetemplate # Селектор для поиска подов
  # Указание стратегии обновления
  strategy: 
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1 # Количество подов, которые могут быть недоступны во время обновления
      maxSurge: 2       # Количество подов, которые могут быть созданы во время обновления
  template:
    # Манифест - Объект pod (PodSpec)
    metadata:
      labels:
        pod: aspnetmicroservicetemplate # Метаданные для поиска подов
    spec:
      priorityClassName: hight-priority # Указание класса приоритета
      containers:
        # Имя контейнера
      - name: aspnetmicroservicetemplate-container
        # Адрес образа на Docker Hub
        image: docker.io/vegiwoo/aspnetmicroservicetemplate:1.0.9
        resources:
          # Ресурсы, которые будут выделены контейнеру
          requests:
            memory: "512Mi" # Минимально необходимая память в мебибайтах 
            cpu: "500m"     # Минимально необходимый CPU в миллиярдных долях (250m = 25% ядра)
          # Лимиты, которые могут быть выделены контейнеру
          limits:
            memory: "512Mi"   # Максимально допустимая память
            cpu: "500m"       # Максимально допустимый CPU
        ports:  
        - containerPort: 8081
        # Readiness and liveness probe
        readinessProbe:
          initialDelaySeconds: 10 # Задержка перед проверкой
          periodSeconds: 30       # Период проверки
          # Выполняется этот http-запрос
          httpGet:
            path: /readyz
            port: 8081
            scheme: HTTP
          timeoutSeconds: 2       # Таймаут ответа на запрос
          failureThreshold: 1     # Количество допустимых неудачных попыток
          successThreshold: 1     # Количество необходимых успешных попыток
        livenessProbe:
          initialDelaySeconds: 30 
          periodSeconds: 30       
          httpGet:
            path: /healthz
            port: 8081
            scheme: HTTP
          timeoutSeconds: 5       
          failureThreshold: 3
          successThreshold: 1
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Production"
        # Test! 
        - name: AVATAR_ENDPOINT
          value: http://robohash-np